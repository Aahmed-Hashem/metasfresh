
spring.application.name=metasfresh-edi
spring.application.title=metasfresh edi esb-service

#camel.springboot.jmx-enabled = false
server.port=8184

#rabbitmq config
#note: when running within docker, our startup-script overrides these 4 properties
camel.component.rabbitmq.hostname=localhost
camel.component.rabbitmq.port-number=30050
camel.component.rabbitmq.username=guest
camel.component.rabbitmq.password=guest

logging.path = log/


#routing key for durable messages, used by the esb's amqp producer endpoint (where data is coming out of the esb)
#If metasfresh is temporarily down, messages are stored by amqp
amqp.exchange.durable=de.metas.esb.durable.exchange

#amqp-exchange for durable messages, used by the esb's amqp producer endpoint (where data is coming out of the esb)
#If metasfresh is temporarily down, messages are stored by amqp
amqp.out.exchange.durable=de.metas.esb.to.metasfresh.durable

#amqp-exchange for non-durable messages, used by the esb's amqp producer endpoint (where data is coming out of the esb)
#If metasfresh is temporarily down, messages are are discarded
amqp.out.exchange.nondurable=de.metas.esb.to.metasfresh.nondurable

# !! Deprecated !!
# Fallback for older bundles. Every bundle should explicitly use either the durable or the nondurable exchange!!
amqp.out.exchange={{amqp.out.exchange.durable}}

#amqp for durable messages, used by the ebs. amqp consumer endpoint (where data is going into the esb)
#If the processing bundle is temporarily down, messages are stored until it comes up again
amqp.in.exchange.durable=de.metas.esb.from.metasfresh.durable

#amqp for durable messages, used by the ebs. amqp consumer endpoint (where data is going into the esb)
#If the processing bundle is temporarily down, messages are are discarded
amqp.in.exchange.nondurable=de.metas.esb.from.metasfresh.nondurable

# !! Deprecated !!
# Fallback for older bundles. Every bundle should exlicitly use either the durable or the nondurable exchange!!
amqp.in.exchange={{amqp.in.exchange.durable}}
edi.local.dir={{java.io.tmpdir}}/edi-standalone
#edi.local.dir=/home/esb/edi
#
# EDI Error Logging EndPoint Configuration
#
edi.log.exception.handler=log:de.metas.esb.edi.exceptionHandler?level=ERROR&showException=true&showCaughtException=true&showStackTrace=true&multiline=true
#

##
# The following properties configure where generated EDI files are stored
##

#
# Generated CHARSET_NAME
# customer's EDI clearing center (compudata) needs the files to be in "ANSI"
edi.generated.charset.name=Cp1252


#
# Invoice FTP/File properties (ftp is currently not used!)
#
# helper properties, not directly read by the esb bundle
edi.file.invoice.dir={{edi.local.dir}}/output/invoic
#edi.ftp.invoice.username=p22783f2
#edi.ftp.invoice.password=
#edi.ftp.invoice.server=
#edi.ftp.invoice.folder=ftp-ep-fresh-edi

# INVOIC files are stored with this file name, no matter if FTP or local file system; this property is directly read by the esb bundle
edi.file.invoice.filename=invoic-$simple{date:now:ddMMyyyy-hhmmss-SSSZ}.edi
edi.file.invoice.xml.filename=invoic-$simple{date:now:ddMMyyyy-hhmmss-SSSZ}.xml

#Endpoint URL for generated EDI INVOIC files
#Note that we need the charset URI param, even though we call .convertBodyTo(byte[].class, charsetName) within our route
edi.file.invoice=file://{{edi.file.invoice.dir}}?charset={{edi.generated.charset.name}}
edi.file.invoice.xml=file://{{edi.file.invoice.dir}}/xml?charset={{edi.generated.charset.name}}
#FTP is currently disabled, instead we store the EDI file locally
#edi.file.invoice=ftp://{{edi.ftp.invoice.username}}@{{edi.ftp.invoice.server}}/{{edi.ftp.invoice.folder}}?password={{edi.ftp.invoice.password}}

#
# DESADV FTP/File properties (ftp is currently not used!)
#
# helper properties, not directly read by the esb bundle
edi.file.desadv.dir={{edi.local.dir}}/output/desadv
#edi.ftp.desadv.username=p22783f2
#edi.ftp.desadv.password=
#edi.ftp.desadv.server=
#edi.ftp.desadv.folder=ftp-ep-fresh-edi

# DESADV files are stored with this file name, no matter if FTP or local file system; this property is directly read by the esb bundle
edi.file.desadv.filename=desadv-$simple{date:now:ddMMyyyy-hhmmss-SSSZ}.edi
edi.file.desadv.xml.filename=desadv-$simple{date:now:ddMMyyyy-hhmmss-SSSZ}.xml

#Endpoint URL for generated EDI INVOIC files
#Note that we need the charset URI param, even though we call .convertBodyTo(byte[].class, charsetName) within our route
edi.file.desadv=file://{{edi.file.desadv.dir}}?charset={{edi.generated.charset.name}}
edi.file.desadv.xml=file://{{edi.file.desadv.dir}}/xml?charset={{edi.generated.charset.name}}
#FTP is currently disabled, instead we store the EDI file locally
#edi.file.desadv=ftp://{{edi.ftp.desadv.username}}@{{edi.ftp.desadv.server}}/{{edi.ftp.desadv.folder}}?password={{edi.ftp.desadv.password}}

#
# Properties that are set when mapping the POJOs
#
#Supplier-ID
edi.props.000.sender.gln=9876543210987
#take this out
edi.props.stepcom.partner.id=partnerId
#owner id used in the document header
edi.props.stepcom.owner.id=CHEESE
#application ref used in the document header
edi.props.stepcom.application.ref=metasfresh
#supplier gln used for desadv supplier address
edi.props.desadv.stepcom.supplier.gln=9876543210987
#supplier additional id used for address reference
edi.props.desadv.stepcom.supplier.additional.id=apaiID

#folder to store generated EDI files that are in the process of being sent via FTP
edi.local.processed=file://{{edi.local.dir}}/processed

#subfolder of EDI.local.processed where we store EDI files that have been successfully sent via FTP
edi.local.processed.folder.done=done

#subfolder of EDI.local.processed where we  store EDI files that could not be set via FTP
edi.local.processed.folder.error=error

#EP where we send a copy of the error feedback that is given to metasfresh in case a file could not be send
#contains the FTP error message
edi.local.error=file://{{edi.local.dir}}/error

#
# Usually there is no need to edit the following properties
#
edi.ftp.invoice=ftp://{{edi.ftp.invoice.username}}@{{edi.ftp.invoice.server}}/{{edi.ftp.invoice.folder}}?password={{edi.ftp.invoice.password}}
edi.ftp.desadv=ftp://{{edi.ftp.desadv.username}}@{{edi.ftp.desadv.server}}/{{edi.ftp.desadv.folder}}?password={{edi.ftp.desadv.password}}


ep.amqp.from.ad=rabbitmq:{{amqp.exchange.durable}}?exchangeType=topic&durable=true&autoDelete=false&routingKey={{amqp.in.exchange.durable}}&queue={{amqp.in.exchange.durable}}
ep.amqp.to.ad=rabbitmq:{{amqp.exchange.durable}}?exchangeType=topic&durable=true&autoDelete=false&routingKey={{amqp.out.exchange.durable}}&queue={{amqp.out.exchange.durable}}


#edi.error and edi.deadletter
#are used to connect the camel error handling with the camel routes that sends the error feedback to metasfresh
# !! so be sure to leave it like this, unless you know what you're doing !!
edi.error=direct:error
edi.deadletter=direct:deadletter

#
# EDI XML Configuration File(s) for INVOIC (change it depending on the project used)
#
edi.smooks.config.xml.invoices=/marshal-config/smooks/invoices/edi-smooks-marshal-compudata-config-fresh.xml
#Note: do use external files from the file system, you can do:
#edi.smooks.config.xml.invoices=file://{{edi.local.dir}}/marshal-config/smooks/invoices/edi-smooks-marshal-cctopinvoice-config-customer_01.xml

#
# EDI XML Configuration File(s) for DESADV (change it depending on the project used)
#
edi.smooks.config.xml.desadv=/marshal-config/smooks/desadv/edi-smooks-marshal-compudata-config-fresh.xml
#Note: do use external files from the file system, you can do:
#edi.smooks.config.xml.desadv=file://{{edi.local.dir}}/marshal-config/smooks/desadv/edi-smooks-marshal-compudata-config-fresh.xml

#
# EDI XML Configuration File(s) for compudata-ORDERS (change it depending on the project used)
#
#Use the files that are bundled within the EDI osgi bundle
edi.smooks.config.xml.orders.H000=/marshal-config/smooks/orders/edi-smooks-compudata-orders-H000.xml
edi.smooks.config.xml.orders.H100=/marshal-config/smooks/orders/edi-smooks-compudata-orders-H100.xml
edi.smooks.config.xml.orders.H110=/marshal-config/smooks/orders/edi-smooks-compudata-orders-H110.xml
edi.smooks.config.xml.orders.H120=/marshal-config/smooks/orders/edi-smooks-compudata-orders-H120.xml
edi.smooks.config.xml.orders.H130=/marshal-config/smooks/orders/edi-smooks-compudata-orders-H130.xml
edi.smooks.config.xml.orders.P100=/marshal-config/smooks/orders/edi-smooks-compudata-orders-P100.xml
edi.smooks.config.xml.orders.P110=/marshal-config/smooks/orders/edi-smooks-compudata-orders-P110.xml
edi.smooks.config.xml.orders.T100=/marshal-config/smooks/orders/edi-smooks-compudata-orders-T100.xml
#Note: do use external files from the file system, you can do e.g.:
#edi.smooks.config.xml.orders.H000=file://{{edi.local.dir}}/marshal-config/smooks/orders/edi-smooks-compudata-orders-H000.xml

#
# Input compudata-ORDERS to XML
#
# reading from local file; see http://camel.apache.org/ftp.html on how to get the EDI data via FTP
edi.input=file://{{edi.local.dir}}/input
edi.input.orders={{edi.input}}/orders/compudata?preMove=.processed&move=.done&moveFailed=.error

#
# Input stepcom-ORDERS-XML to XML
#
xml.edi.input.orders={{edi.input}}/orders/stepcom-xml?preMove=.processed&move=.done&moveFailed=.error

#
# Feedback CHARSET_NAME
#
edi.feedback.charset.name=UTF-8

#
# Decimal Formatter Settings
#
edi.decimalformat.isGroupingUsed=false
edi.decimalformat.maximumFractionDigits=10
#edi.decimalformat.symbol.groupingSeparator=.
edi.decimalformat.symbol.decimalSeparator=.

#
# EDI ORDERS DEFAULTS
#
edi.order.edi_message_date_pattern=yyyyMMddHHmmss
edi.order.ad_client_value=metasfresh
edi.order.ad_org_id=1000000
edi.order.ad_input_datadestination_internalname=DEST.de.metas.ordercandidate
edi.order.ad_input_datasource_id=150
edi.order.ad_user_enteredby_id=150
edi.order.deliveryrule=A
edi.order.deliveryviarule=P

#
# EDI DESADV DEFAULTS
#
edi.props.desadv.isTest=1
edi.xml.props.desadv.isTest=T
#
# EDI INVOIC DEFAULTS
#
edi.props.invoice.isTest=1
edi.xml.props.invoice.isTest=T
# shows if the incoming invoice and desadv data should be saved as XML (true or false)
edi.props.invoice.isXML=true
edi.props.desadv.isXML=true


#
# Excel Orders Import (task 08839)
# Code reference: XLSConfigurationContext
xls.order.input={{edi.input}}/olcand
xls.order.currency=CHF
xls.order.ad_client_value={{edi.order.ad_client_value}}
xls.order.ad_org_id={{edi.order.ad_org_id}}
xls.order.ad_input_datadestination_internalname={{edi.order.ad_input_datadestination_internalname}}
xls.order.ad_input_datasource_id=160
xls.order.ad_user_enteredby_id=160
xls.order.deliveryrule=A
xls.order.deliveryviarule=P
