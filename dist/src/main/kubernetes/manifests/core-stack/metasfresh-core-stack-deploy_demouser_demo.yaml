apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "metasfresh-core-stack-demouser-demo"
  labels:
    de.metas.deployment.type: metasfresh-core-stack
    de.metas.deployment.user: "demouser"
    de.metas.deployment.stage: "demo"
    de.metas.deployment.name: "metasfresh-core-stack-demouser-demo"
  namespace: "default"
# can be created with kubectl create namespace demo"
#  namespace: "demo"
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        de.metas.deployment.type: metasfresh-core-stack
        de.metas.deployment.user: "demouser"
        de.metas.deployment.stage: "demo"
    spec:
      containers:
#
# metasfresh-app
      - env:
        - name: METASFRESH_HOME
          value: /opt/metasfresh
        - name: DB_HOST
          value: "metasfresh-postgresql-demouser-demo"
        - name: APP_HOST
          value: localhost
        - name: ES_HOST
          value: localhost
        - name: ES_PORT
          value: '9300'
        - name: ADMIN_HOST
          value: metasfresh-admin
        - name: ADMIN_PORT
          value: '9090'
        name: app
        image: docker.metasfresh.com/metasfresh/metasfresh-app-dev:gh18_dist_LATEST
        imagePullPolicy: Always
        ports:
          - containerPort: 61616 # activemq
          - containerPort: 8282  # embedded tomcat
          - containerPort: 8788  # remote debugging
        resources: 
          requests:
            memory: 1200M
        volumeMounts:
        - mountPath: /etc/localtime
          name: host-localtime
          readOnly: true
        - mountPath: /etc/timezone
          name: host-timezone
          readOnly: true
#
# metasfresh-webui-api
      - env:
        - name: DB_HOST
          value: "metasfresh-postgresql-demouser-demo"
        - name: APP_HOST
          value: localhost
        - name: ES_HOST
          value: localhost
        - name: ES_PORT
          value: '9300'
        - name: ADMIN_HOST
          value: metasfresh-admin
        - name: ADMIN_PORT
          value: '9090'          
        name: webapi
        image: docker.metasfresh.com/metasfresh/metasfresh-webui-api-dev:gh18_dist_LATEST
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        - containerPort: 8789 # remote debugging
        resources: 
          requests:
            memory: 600M
        volumeMounts:
        - mountPath: /etc/localtime
          name: host-localtime
          readOnly: true
        - mountPath: /etc/timezone
          name: host-timezone
          readOnly: true
#
# Elastic search
      - env:
        - name: ES_JAVA_OPTS
          value: -Xms128M -Xmx256m
# i just buid&pushed this in a very Q&D fashion..          
        name: search
        image: docker.metasfresh.com/metasfresh/search:latest
        imagePullPolicy: Always
        resources: {}
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
        volumeMounts:
#        - mountPath: /usr/share/elasticsearch/data
#          name: search-claim0
        - mountPath: /etc/localtime
          name: host-localtime
          readOnly: true
        - mountPath: /etc/timezone
          name: host-timezone
          readOnly: true
# webui
      - env:
        - name: WEBUI_API_HOST
          value: "demouser-demo.metasfresh.com"
        - name: WEBUI_API_PORT
        # our ingress controller is made available via nodeport 32130
          value: '32130'
        #  value: '443'         
        name: webui
        image: docker.metasfresh.com/metasfresh/metasfresh-webui-dev:gh18_dist_LATEST
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        - containerPort: 443
        resources: {}
        volumeMounts:
        - mountPath: /etc/localtime
          name: host-localtime
          readOnly: true
        - mountPath: /etc/timezone
          name: host-timezone
          readOnly: true
      restartPolicy: Always
      initContainers:
        - name: init-postgres
          image: docker.metasfresh.com/metasfresh/metasfresh-db-init-pg-10-3:gh18_dist_LATEST
          imagePullPolicy: Always
          env:
          - name: DB_SYSPASS
            value: System
          - name: METASFRESH_DBNAME
            value: metasfresh
          - name: METASFRESH_PASSWORD
            value: metasfresh
          - name: METASFRESH_USERNAME
            value: metasfresh
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgresql-data
      volumes:
      - name: host-localtime # was app-claim1
        hostPath:
          path: /etc/localtime
      - name: host-timezone # was app-claim2
        hostPath:
          path: /etc/timezone
      - name: postgresql-data
        hostPath:
          path: "/tmp/postgresql-data-demouser-demo"
