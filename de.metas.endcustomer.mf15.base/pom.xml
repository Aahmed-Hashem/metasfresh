<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.metas.endcustomer.mf15</groupId>
		<artifactId>de.metas.endcustomer.mf15</artifactId>
		<version>1.0_IT-SNAPSHOT</version>
	</parent>

	<artifactId>de.metas.endcustomer.mf15.base</artifactId>
	<packaging>jar</packaging>


	<properties>
		<!-- empty property because the sql migration dir already contains a list 
			of base directories -->
		<migration-sql-basedir></migration-sql-basedir>
	</properties>

	<dependencies>
		<dependency>
			<groupId>de.metas.fresh</groupId>
			<artifactId>de.metas.fresh.base</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- The following dependencies are required to run the swing client from within eclipse -->

		<!-- Required to connect to the jboss-ejb server (always needs to be in the client, not only from eclipse, but in this base module we leave it as "provided") -->
		<dependency>
			<groupId>de.metas.adempiere.adempiere</groupId>
			<artifactId>de.metas.adempiere.adempiere.jbossfacet</artifactId>
			<scope>provided</scope>
		</dependency>
				
		<!-- Problem: this ends up in customizations despite scope beeing "provided" 
			  => crushes APO on server 
			  => server won't start 
			Current workaround in ant; 
			TODO: consider replacing it with a not-all jboss-lib that just contains the 
			stuff we need to start from eclipse -->
		<dependency>
			<groupId>org.jboss.client</groupId>
			<artifactId>jbossall-client</artifactId>
			<version>4.2.3.GA</version>
			<scope>provided</scope>
		</dependency>

		<!-- those two are required when we run with -Dorg.adempiere.server.embedded=true -->
		<dependency>
			<groupId>de.metas.adempiere.adempiere</groupId>
			<artifactId>de.metas.adempiere.adempiere.serverRoot.base</artifactId>
		</dependency>
		<dependency>
			<groupId>de.metas.adempiere.adempiere</groupId>
			<artifactId>de.metas.adempiere.adempiere.serverRoot.ejb</artifactId>
		</dependency>

		<!--
		Dependency needed in case you want to use de.metas.adempiere.report.jasper.server.LocalJasperServer.
		i.e. a developer wants to use embedded jasper server while working/debugging in eclipse.
		scope=provided so it's ONLY considered on the local dev station
		 -->
		<dependency>
			<groupId>de.metas.report.jasper.server</groupId>
			<artifactId>de.metas.report.jasper.server.base</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<!-- 
			Note: as of now, we still need this jar to be in the lib folder to be in the classpath of (RUN_Post_Rollout_Processes.sh). 
			However, it's only a tiny part that we actually need..
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>

				<executions>
					<execution>
						<id>shade-all</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>true</shadedArtifactAttached> <!-- Make the shaded artifact not the main one -->
							<shadedClassifierName>allInOne</shadedClassifierName> <!-- set the suffix to the shaded jar -->
							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<description>Creates one uber-jar:
1. allInOne: an uber-jar with all dependencies: this uber jar is supposed to be used by the swing client</description>
</project>