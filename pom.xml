<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.metas</groupId>
	<artifactId>de.metas.parent.general</artifactId>
	<version>1.0.0</version>

	<packaging>pom</packaging>

	<description>Default parent pom with common settings (e.g. java file encoding) to be used by all maven projects</description>

	<url>http://www.metasfresh.com/</url>

	<organization>
		<name>metas GmbH</name>
		<url>http://www.metasfresh.com/</url>
	</organization>

	<inceptionYear>2015</inceptionYear>

	<developers>
		<developer>
			<name>metasfresh contributors</name>
			<organizationUrl>http://www.metasfresh.com/</organizationUrl>
			<email>contributors@metasfresh.com</email>
		</developer>
	</developers>

	<properties>
		<!-- this is our default; individual projects might need to specify their own settings -->
		<metasfresh.java.version>1.8</metasfresh.java.version>
	</properties>

	<repositories>
		<!--
		    The repositories that we relate on are defined in this parent POM,
			because whether an artifact is found should not depend on a specific user's settings.xml
		-->
		<repository>
			<id>metasfresh-repo</id>
			<name>metasfresh maven repository</name>
			<url>https://repo.metasfresh.com/content/groups/mvn-public/</url>
		</repository>

		<!-- this additional repo's parameters can be set from outside. It usually correesponds to a (task-)branch -->
		<repository>
			<id>${deploy-repo-id}</id>
			<name>${deploy-repo-name}</name>
			<url>${deploy-repo-url}</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<!-- our main repo is also our plugin repo; also see https://maven.apache.org/pom.html#Plugin_Repositories -->
		<!-- see https://github.com/metasfresh/metasfresh-parent/issues/3 -->
		<pluginRepository>
			<id>metasfresh-repo</id>
			<name>metasfresh maven repository</name>
			<url>https://repo.metasfresh.com/content/groups/mvn-public/</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<!--
		Where to deploy build artifacts; the values are coming from the outside via cmd-line parameters.
		Even if you can't deploy to this repo, you can still make your own builds and install them to your local repo.
		-->
		<snapshotRepository>
			<id>${deploy-repo-id}</id>
			<name>${deploy-repo-name}</name>
			<url>${deploy-repo-url}</url>
		</snapshotRepository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>
				<!-- we set the metasfresh-wide encoding for code and resource files to be UTF-8 by default -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<source>${metasfresh.java.version}</source>
						<target>${metasfresh.java.version}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxb2-maven-plugin</artifactId>
					<!--
						later versions of the plugin don't work with eclipse's m2e plugin.
						see https://github.com/mojohaus/jaxb2-maven-plugin/issues/24 for details
						and updates on the issue
					-->
					<!-- version>2.2</version -->
					<version>1.6</version>
				</plugin>

				<plugin>
					<!--
						gh #968: If we run mvn properties:write-project-properties
						then store the properties to a file calle "app.properties".
						We need this for https://github.com/metasfresh/metasfresh/issues/968
						because among those properties there are some artifact versions that we want to document.
					-->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>1.0.0</version>
					<configuration>
						<outputFile>app.properties</outputFile>
					</configuration>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.vaadin</groupId>
										<artifactId>
											vaadin-maven-plugin
										</artifactId>
										<versionRange>
											[7.6.1,)
										</versionRange>
										<goals>
											<goal>compile-theme</goal>
											<goal>resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>properties-maven-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>set-system-properties</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>set-system-properties</goal>
						</goals>
						<configuration>
							<properties>
								<!--
									Avoid the build error "Failed to read schema document 'xjc.xsd', when using jaxb2-maven-plugin version 1.6.
									because 'file' access is not allowed due to restriction set by the accessExternalSchema
									property."
									Thanks to http://stackoverflow.com/questions/34340115/is-there-a-generic-way-to-set-d-arguments-from-within-a-pom-xml -->
								<property>
									<name>javax.xml.accessExternalSchema</name>
									<value>all</value>
								</property>
							</properties>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
