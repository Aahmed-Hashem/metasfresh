<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.metas</groupId>
	<artifactId>de.metas.parent.general</artifactId>
	<version>1.0.0</version>

	<packaging>pom</packaging>

	<description>
Default parent pom with common settings (e.g. java file encoding) to be used by all maven projects.
	</description>

	<url>http://www.metasfresh.com/</url>

	<organization>
		<name>metas GmbH</name>
		<url>http://www.metasfresh.com/</url>
	</organization>

	<inceptionYear>2015</inceptionYear>

	<developers>
		<developer>
			<name>metasfresh contributors</name>
			<organizationUrl>http://www.metasfresh.com/</organizationUrl>
			<email>contributors@metasfresh.com</email>
		</developer>
	</developers>

	<properties>
		<!-- this is our default; individual projects might need to specify their own settings -->
		<metasfresh.java.version>1.8</metasfresh.java.version>

		<!--
			3.8.0 is currently the latest and greatest. Spring boot declares some 2.x version that 
			see http://docs.spring.io/spring-boot/docs/1.2.3.RELEASE/reference/htmlsingle/#howto-customize-dependency-versions-with-maven 
		-->
		<assertj.version>3.8.0</assertj.version>
	</properties>

	<modules>
		<!-- this module provides a shared set of assembly descriptors-->
		<module>assemblies</module>
	</modules>

	<repositories>
		<!-- 
		    The repositories that we relate on are defined in this parent POM, 
			because whether an artifact is found should not depend on a specific user's settings.xml 
		-->
		<repository>
			<id>metasfresh-repo</id>
			<name>metasfresh maven repository</name>
			<url>https://repo.metasfresh.com/content/groups/mvn-public/</url>
		</repository>

		<!-- this additional repo's parameters can be set from outside. It usually correesponds to a (task-)branch -->
		<repository>
			<id>${deploy-repo-id}</id>
			<name>${deploy-repo-name}</name>
			<url>${deploy-repo-url}</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<!-- our main repo is also our plugin repo; also see https://maven.apache.org/pom.html#Plugin_Repositories -->
		<!-- see https://github.com/metasfresh/metasfresh-parent/issues/3 -->
		<pluginRepository>
			<id>metasfresh-repo</id>
			<name>metasfresh maven repository</name>
			<url>https://repo.metasfresh.com/content/groups/mvn-public/</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<!-- 
		Where to deploy build artifacts; the values are coming from the outside via cmd-line parameters.
		Even if you can't deploy to this repo, you can still make your own builds and install them to your local repo.
		-->
		<repository>
			<id>${deploy-repo-id}</id>
			<name>${deploy-repo-name}</name>
			<url>${deploy-repo-url}</url>
		</repository>
	</distributionManagement>

	<dependencyManagement>

		<dependencies>
			<dependency>
				<groupId>org.assertj</groupId>
				<artifactId>assertj-core</artifactId>
				<version>${assertj.version}</version>
			</dependency>
		</dependencies>

	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>

				<!-- we set the metasfresh-wide encoding for code and resource files to be UTF-8 by default -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<source>${metasfresh.java.version}</source>
						<target>${metasfresh.java.version}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxb2-maven-plugin</artifactId>
					<version>2.3.1</version> <!-- https://github.com/metasfresh/metasfresh/issues/1598 -->
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.3</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.7</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-reactor-plugin</artifactId>
					<version>1.1</version>
				</plugin>

				<!-- Add the generic info plus ci build info to the manifests of all jars that we create -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<archive>
							<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
							<manifestEntries>
								<ciBuildNo>${BUILD_NUMBER}</ciBuildNo>
								<ciBuildTag>${BUILD_TAG}</ciBuildTag>
								<ciJobName>${JOB_NAME}</ciJobName>
								<ciBuildUrl>${BUILD_URL}</ciBuildUrl>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.20</version>
					<configuration>
						<systemPropertyVariables>
							<concordion.output.dir>${acceptance.reports.dir}</concordion.output.dir>
						</systemPropertyVariables>
						<includes>
							<!-- default inclusions, see http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html -->
							<include>**/Test*.java</include>
							<include>**/*Test.java</include>
							<include>**/*TestCase.java</include>

							<!-- additional include, because we often use that pattern -->
							<include>**/*Tests.java</include>
						</includes>
					</configuration>
				</plugin>

				<plugin>
					<!-- 
						gh #968: If we run mvn properties:write-project-properties
						then store the properties to a file calle "app.properties".
						We need this for https://github.com/metasfresh/metasfresh/issues/968 
						because among those properties there are some artifact versions that we want to document.
					-->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>1.0.0</version>
					<configuration>
						<outputFile>app.properties</outputFile>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<!-- note: with 1.4.1 we had this problem: https://issues.apache.org/jira/browse/MASSEMBLY-659
						https://issues.apache.org/jira/browse/MENFORCER-156 ... solved in 1.3.1 but
						aparently came back in 1.4.1 ... Concretely, we got errors like: [...] 00:00:34.798
						[INFO] Adding ignorable dependency: null:jmockit:null 00:00:34.799 [INFO]
						Adding ignore: org.junit.runner.Runner 00:00:34.800 [WARNING] Could not find
						junit:junit:jar:4.11:test at null 00:00:34.801 [WARNING] Could not find de.metas.migration:de.metas.migration.cli:jar:3.0.0:compile
						at null 00:00:34.802 [WARNING] Could not find org.hamcrest:hamcrest-all:jar:1.3:test
						at null 00:00:34.803 [WARNING] Could not find org.jmockit:jmockit:jar:1.20:test
						at null -->
					<version>1.4.1</version>
					<dependencies>
						<!-- needed for banDuplicateClasses -->
						<dependency>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>extra-enforcer-rules</artifactId>
							<version>1.0-beta-4</version>
						</dependency>
					</dependencies>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.vaadin</groupId>
										<artifactId>
											vaadin-maven-plugin
										</artifactId>
										<versionRange>
											[7.6.1,)
										</versionRange>
										<goals>
											<goal>compile-theme</goal>
											<goal>resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>properties-maven-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>set-system-properties</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>


	</build>

	<profiles>
		<profile>
			<!-- 
				The enforcer plgugin can be a tremendous nuisance.
				It fails because we use version ranges in our parent pom declarations with this outout:

[WARNING] Could not find org.jmockit:jmockit:jar:1.30:test at null
[WARNING] Rule 0: org.apache.maven.plugins.enforcer.RequirePluginVersions failed with message:
Failure to find de.metas:de.metas.parent:pom:(1.0.0,3) in (URL ...) was cached in the local repository, resolution will not be reattempted...
  de.metas:de.metas.parent:pom:(1.0.0,3)

				However, when runnung on jenkins, we resolve the parent version anyways (using the maven-versions-plugin) 
				and *then* we can benefit a lot from making sure that the plugin versions are not a moving target
			 -->
			<id>enforcer-profile</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<configuration>
							<rules>

								<!-- task 08834: We shall not leave the decision about plugin-versions
									to maven. Rationale: we had the case that a build stopped working at a *very*
									critical moment, because maven picked a more recent version of the jaxb plugin.
									That version didn't support the way, we configured it and failed with an
									error message. This shall not happen again. -->
								<requirePluginVersions>
									<message>!! We need to have the plugin version under control to avoid build failures due to maven releasing a new plugin versionm !!</message>
									<banLatest>true</banLatest>
									<banRelease>true</banRelease>
									<banSnapshots>true</banSnapshots>
									<phases>clean,deploy,site</phases>
									<additionalPlugins>
										<additionalPlugin>org.apache.maven.plugins:maven-reactor-plugin</additionalPlugin>
									</additionalPlugins>
									<unCheckedPluginList>org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-eclipse-plugin</unCheckedPluginList>
								</requirePluginVersions>

								<!-- See http://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html -->
								<dependencyConvergence />

								<banDuplicateClasses>
									<ignoreClasses>

										<!-- itext-2.1.7 has two different versions as dependences -->
										<ignoreClass>org.bouncycastle.*</ignoreClass>

										<!-- org.jboss.client:jbossall-client and partially geronimo specs -->
										<ignoreClass>javax.annotation.*</ignoreClass>
										<ignoreClass>javax.ejb.*</ignoreClass>
										<ignoreClass>javax.jms.*</ignoreClass>
										<ignoreClass>javax.management.j2ee.*</ignoreClass>
										<ignoreClass>javax.xml.*</ignoreClass>
										<ignoreClass>javax.transaction.*</ignoreClass>

										<ignoreClass>org.apache.*</ignoreClass>
										<ignoreClass>org.codehaus.*</ignoreClass>
										<ignoreClass>hidden.org.codehaus.*</ignoreClass>
										<ignoreClass>org.junit.*</ignoreClass>
										<ignoreClass>org.w3c.*</ignoreClass>
										<ignoreClass>org.xml.*</ignoreClass>

										<!-- this class originates from org.zkoss.calendar:calendar:jar:1.0.0-RC -->
										<ignoreClass>org.zkoss.calendar.render.CalendarsDefault</ignoreClass>

										<!-- the following are camel/servicemix related dependencies -->
										<!-- Found in, both are dependencies of mylin-smooks-all org.ow2.bundles:ow2-bundles-externals-opencsv:jar:1.0.23:compile 
											net.sf.opencsv:opencsv:jar:2.1:compile -->
										<ignoreClass>au.com.bytecode.*</ignoreClass>

										<ignoreClass>com.microsoft.schemas.*</ignoreClass>
										<ignoreClass>org.etsi.uri.*</ignoreClass>
										<ignoreClass>org.openxmlformats.schemas.*</ignoreClass>
										<ignoreClass>org.w3.x2000.*</ignoreClass>

										<!-- Found in: xmlpull:xmlpull:jar:1.1.3.1:compile xpp3:xpp3_min:jar:1.1.4c:compile -->
										<ignoreClass>org.xmlpull.*</ignoreClass>

										<!-- Found in: org.apache.xmlbeans:xmlbeans:jar:2.3.0:compile org.apache.servicemix.bundles:org.apache.servicemix.bundles.poi:jar:3.12_1:compile -->
										<ignoreClass>schemaorg_apache_xmlbeans.system.*</ignoreClass>
										<ignoreClass>repackage.Repackager</ignoreClass>
										<ignoreClass>repackage.Repackage</ignoreClass>
										<ignoreClass>repackage.EditBuildScript</ignoreClass>

										<!-- Found in: org.apache.tomcat.embed:tomcat-embed-core:jar:8.0.30:compile 
											javax.servlet:javax.servlet-api:jar:3.1.0:provided -->
										<ignoreClass>javax.servlet.*</ignoreClass>
									</ignoreClasses>

									<dependencies>
										<!-- See https://groups.google.com/forum/#!topic/jmockit-users/nwNw-la_FAM 
											("JUnit classes in JMockit jar") for background info -->
										<dependency>
											<artifactId>jmockit</artifactId>
											<ignoreClasses>
												<ignoreClass>org.junit.runner.Runner</ignoreClass>
											</ignoreClasses>
										</dependency>

										<!-- this is a dependency of spring-boot-starter-test 1.4.1 the error
											message we are avoiding this was goes like this: ================= Duplicate
											classes found: Found in: org.ow2.asm:asm:jar:5.0.3:test net.minidev:accessors-smart:jar:1.1:test
											Duplicate classes: org/objectweb/asm/Type.class [...] ================= -->
										<dependency>
											<groupId>net.minidev</groupId>
											<artifactId>accessors-smart</artifactId>
											<ignoreClasses>
												<ignoreClass>org.objectweb.asm.*</ignoreClass>
											</ignoreClasses>
										</dependency>

										<!-- see also https://www.elastic.co/blog/to-shade-or-not-to-shade -->
										<dependency>
											<groupId>org.elasticsearch</groupId>
											<artifactId>elasticsearch</artifactId>
											<ignoreClasses>
												<ignoreClass>org.joda.*</ignoreClass>
											</ignoreClasses>
										</dependency>

									</dependencies>

									<findAllDuplicates>true</findAllDuplicates>
								</banDuplicateClasses>
							</rules>
							<fail>true</fail>
						</configuration>

						<executions>
							<execution>
								<id>enforce</id>
								<goals>
									<goal>enforce</goal>
								</goals>

							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- If there is a configs directory, then this profile will activate and zip up the files in that directory -->
			<id>configs</id>
			<activation>
				<file>
					<exists>src/main/configs</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas</groupId>
								<artifactId>metasfresh-assemblies</artifactId>
								<version>[1.0.0,5.0.0]</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-configs-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>configs</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>