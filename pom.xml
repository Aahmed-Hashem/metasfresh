<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.metas</groupId>
	<artifactId>de.metas.parent.general</artifactId>
	<version>1.0.0</version>

	<packaging>pom</packaging>

	<description>
Default parent pom with common settings (e.g. java file encoding) to be used by all maven projects.
	</description>

	<url>http://www.metasfresh.com/</url>

	<organization>
		<name>metas GmbH</name>
		<url>http://www.metasfresh.com/</url>
	</organization>

	<inceptionYear>2015</inceptionYear>

	<developers>
		<developer>
			<name>metasfresh contributors</name>
			<organizationUrl>http://www.metasfresh.com/</organizationUrl>
			<email>contributors@metasfresh.com</email>
		</developer>
	</developers>

	<properties>
		<!-- this is our default; individual projects might need to specify their own settings -->
		<metasfresh.java.version>1.8</metasfresh.java.version>
	</properties>

	<modules>
		<!-- this module provides a shared set of assembly descriptors-->
		<module>assemblies</module>
	</modules>

	<repositories>
		<!-- 
		    The repositories that we relate on are defined in this parent POM, 
			because whether an artifact is found should not depend on a specific user's settings.xml 
		-->
		<repository>
			<id>metasfresh-repo</id>
			<name>metasfresh maven repository</name>
			<url>https://repo.metasfresh.com/content/groups/mvn-public/</url>
		</repository>

		<!-- this additional repo's parameters can be set from outside. It usually correesponds to a (task-)branch -->
		<repository>
			<id>${deploy-repo-id}</id>
			<name>${deploy-repo-name}</name>
			<url>${deploy-repo-url}</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<!-- our main repo is also our plugin repo; also see https://maven.apache.org/pom.html#Plugin_Repositories -->
		<!-- see https://github.com/metasfresh/metasfresh-parent/issues/3 -->
		<pluginRepository>
			<id>metasfresh-repo</id>
			<name>metasfresh maven repository</name>
			<url>https://repo.metasfresh.com/content/groups/mvn-public/</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<!-- 
		Where to deploy build artifacts; the values are coming from the outside via cmd-line parameters.
		Even if you can't deploy to this repo, you can still make your own builds and install them to your local repo.
		-->
		<repository>
			<id>${deploy-repo-id}</id>
			<name>${deploy-repo-name}</name>
			<url>${deploy-repo-url}</url>
		</repository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>
				<!-- we set the metasfresh-wide encoding for code and resource files to be UTF-8 by default -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<source>${metasfresh.java.version}</source>
						<target>${metasfresh.java.version}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxb2-maven-plugin</artifactId>
					<version>2.3.1</version> <!-- https://github.com/metasfresh/metasfresh/issues/1598 -->
				</plugin>

				<plugin>
					<!-- 
						gh #968: If we run mvn properties:write-project-properties
						then store the properties to a file calle "app.properties".
						We need this for https://github.com/metasfresh/metasfresh/issues/968 
						because among those properties there are some artifact versions that we want to document.
					-->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>1.0.0</version>
					<configuration>
						<outputFile>app.properties</outputFile>
					</configuration>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.vaadin</groupId>
										<artifactId>
											vaadin-maven-plugin
										</artifactId>
										<versionRange>
											[7.6.1,)
										</versionRange>
										<goals>
											<goal>compile-theme</goal>
											<goal>resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>properties-maven-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>set-system-properties</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>

		<profile>
			<!-- If there is a configs directory, then this profile will activate and zip up the files in that directory -->
			<id>configs</id>
			<activation>
				<file>
					<exists>src/main/configs</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas</groupId>
								<artifactId>metasfresh-assemblies</artifactId>
								<version>[1.0.0,5.0.0]</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-configs-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>configs</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>